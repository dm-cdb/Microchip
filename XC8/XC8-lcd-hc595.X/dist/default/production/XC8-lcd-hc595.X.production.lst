

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Apr 01 18:22:16 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	12F683
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Version 2.40
    24                           ; Generated 06/12/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC12F683 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0000                     	;# 
    59     0001                     	;# 
    60     0002                     	;# 
    61     0003                     	;# 
    62     0004                     	;# 
    63     0005                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0013                     	;# 
    75     0014                     	;# 
    76     0015                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     008C                     	;# 
    85     008E                     	;# 
    86     008F                     	;# 
    87     0090                     	;# 
    88     0092                     	;# 
    89     0095                     	;# 
    90     0095                     	;# 
    91     0096                     	;# 
    92     0096                     	;# 
    93     0099                     	;# 
    94     009A                     	;# 
    95     009A                     	;# 
    96     009B                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     0000                     	;# 
   102     0001                     	;# 
   103     0002                     	;# 
   104     0003                     	;# 
   105     0004                     	;# 
   106     0005                     	;# 
   107     000A                     	;# 
   108     000B                     	;# 
   109     000C                     	;# 
   110     000E                     	;# 
   111     000E                     	;# 
   112     000F                     	;# 
   113     0010                     	;# 
   114     0011                     	;# 
   115     0012                     	;# 
   116     0013                     	;# 
   117     0013                     	;# 
   118     0014                     	;# 
   119     0015                     	;# 
   120     0018                     	;# 
   121     0019                     	;# 
   122     001A                     	;# 
   123     001E                     	;# 
   124     001F                     	;# 
   125     0081                     	;# 
   126     0085                     	;# 
   127     008C                     	;# 
   128     008E                     	;# 
   129     008F                     	;# 
   130     0090                     	;# 
   131     0092                     	;# 
   132     0095                     	;# 
   133     0095                     	;# 
   134     0096                     	;# 
   135     0096                     	;# 
   136     0099                     	;# 
   137     009A                     	;# 
   138     009A                     	;# 
   139     009B                     	;# 
   140     009C                     	;# 
   141     009D                     	;# 
   142     009E                     	;# 
   143     009F                     	;# 
   144                           
   145                           	psect	strings
   146     00A8                     __pstrings:
   147     00A8                     stringtab:
   148     00A8                     __stringtab:
   149     00A8                     stringcode:	
   150                           ;	String table - string pointers are 1 byte each
   151                           
   152     00A8                     stringdir:
   153     00A8  3000               	movlw	high stringdir
   154     00A9  008A               	movwf	10
   155     00AA  0804               	movf	4,w
   156     00AB  0A84               	incf	4,f
   157     00AC  0782               	addwf	2,f
   158     00AD                     __stringbase:
   159     00AD  3400               	retlw	0
   160     00AE                     __end_of__stringtab:
   161     00AE                     _myText1:
   162     00AE  3447               	retlw	71
   163     00AF  346C               	retlw	108
   164     00B0  346F               	retlw	111
   165     00B1  3469               	retlw	105
   166     00B2  3472               	retlw	114
   167     00B3  3465               	retlw	101
   168     00B4  3420               	retlw	32
   169     00B5  3461               	retlw	97
   170     00B6  3475               	retlw	117
   171     00B7  3420               	retlw	32
   172     00B8  3443               	retlw	67
   173     00B9  3444               	retlw	68
   174     00BA  3442               	retlw	66
   175     00BB  3420               	retlw	32
   176     00BC  3421               	retlw	33
   177     00BD  3400               	retlw	0
   178     00BE                     __end_of_myText1:
   179     00BE                     _lcdFunc:
   180     00BE  3428               	retlw	40
   181     00BF                     __end_of_lcdFunc:
   182     00BF                     _lcdCon:
   183     00BF  340E               	retlw	14
   184     00C0                     __end_of_lcdCon:
   185     00C0                     _lcdHome:
   186     00C0  3402               	retlw	2
   187     00C1                     __end_of_lcdHome:
   188     00C1                     _lcdClear:
   189     00C1  3401               	retlw	1
   190     00C2                     __end_of_lcdClear:
   191     00C2                     _lcd4bits:
   192     00C2  3420               	retlw	32
   193     00C3                     __end_of_lcd4bits:
   194     00C3                     _myText2:
   195     00C3  3450               	retlw	80
   196     00C4  346F               	retlw	111
   197     00C5  3475               	retlw	117
   198     00C6  3472               	retlw	114
   199     00C7  3420               	retlw	32
   200     00C8  3474               	retlw	116
   201     00C9  346F               	retlw	111
   202     00CA  3475               	retlw	117
   203     00CB  346A               	retlw	106
   204     00CC  346F               	retlw	111
   205     00CD  3475               	retlw	117
   206     00CE  3472               	retlw	114
   207     00CF  3473               	retlw	115
   208     00D0  3420               	retlw	32
   209     00D1  3421               	retlw	33
   210     00D2  3400               	retlw	0
   211     00D3                     __end_of_myText2:
   212     0005                     _GPIObits	set	5
   213     0005                     _GPIO	set	5
   214     0019                     _CMCON0	set	25
   215     000B                     _INTCONbits	set	11
   216     0085                     _TRISIO	set	133
   217     009F                     _ANSEL	set	159
   218     008F                     _OSCCONbits	set	143
   219                           
   220                           	psect	cinit
   221     000B                     start_initialization:	
   222                           ; #config settings
   223                           
   224     000B                     __initialization:
   225     000B                     end_of_initialization:	
   226                           ;End of C runtime variable initialization code
   227                           
   228     000B                     __end_of__initialization:
   229     000B  0183               	clrf	3
   230     000C  280D               	ljmp	_main	;jump to C main() function
   231                           
   232                           	psect	cstackCOMMON
   233     0070                     __pcstackCOMMON:
   234     0070                     ?_do_Shiftr:
   235     0070                     ?_do_Lcden:	
   236                           ; 1 bytes @ 0x0
   237                           
   238     0070                     ?_isr:	
   239                           ; 1 bytes @ 0x0
   240                           
   241     0070                     ??_isr:	
   242                           ; 1 bytes @ 0x0
   243                           
   244     0070                     ?_init_Pic:	
   245                           ; 1 bytes @ 0x0
   246                           
   247     0070                     ?_init_Lcd:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     0070                     ?_reset_Lcd:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0070                     ?_main:	
   254                           ; 1 bytes @ 0x0
   255                           
   256                           
   257                           ; 1 bytes @ 0x0
   258     0070                     	ds	2
   259     0072                     ??_do_Shiftr:
   260     0072                     ??_do_Lcden:	
   261                           ; 1 bytes @ 0x2
   262                           
   263     0072                     ??_init_Pic:	
   264                           ; 1 bytes @ 0x2
   265                           
   266                           
   267                           ; 1 bytes @ 0x2
   268     0072                     	ds	1
   269     0073                     do_Shiftr@value:
   270                           
   271                           ; 1 bytes @ 0x3
   272     0073                     	ds	1
   273     0074                     do_Shiftr@i:
   274                           
   275                           ; 1 bytes @ 0x4
   276     0074                     	ds	1
   277     0075                     ?_send_Nibbles:
   278     0075                     send_Nibbles@rs:	
   279                           ; 1 bytes @ 0x5
   280                           
   281                           
   282                           ; 1 bytes @ 0x5
   283     0075                     	ds	1
   284     0076                     ??_send_Nibbles:
   285                           
   286                           ; 1 bytes @ 0x6
   287     0076                     	ds	1
   288     0077                     send_Nibbles@data:
   289                           
   290                           ; 1 bytes @ 0x7
   291     0077                     	ds	1
   292     0078                     send_Nibbles@lowB:
   293                           
   294                           ; 1 bytes @ 0x8
   295     0078                     	ds	1
   296     0079                     send_Nibbles@hiB:
   297                           
   298                           ; 1 bytes @ 0x9
   299     0079                     	ds	1
   300     007A                     ?_send_Text:
   301     007A                     ?_pos_Lcd:	
   302                           ; 1 bytes @ 0xA
   303                           
   304     007A                     ??_init_Lcd:	
   305                           ; 1 bytes @ 0xA
   306                           
   307     007A                     ??_reset_Lcd:	
   308                           ; 1 bytes @ 0xA
   309                           
   310     007A                     send_Text@n:	
   311                           ; 1 bytes @ 0xA
   312                           
   313     007A                     pos_Lcd@y:	
   314                           ; 1 bytes @ 0xA
   315                           
   316                           
   317                           ; 1 bytes @ 0xA
   318     007A                     	ds	2
   319                           
   320                           	psect	cstackBANK0
   321     0020                     __pcstackBANK0:
   322     0020                     ??_send_Text:
   323     0020                     ??_pos_Lcd:	
   324                           ; 1 bytes @ 0x0
   325                           
   326                           
   327                           ; 1 bytes @ 0x0
   328     0020                     	ds	2
   329     0022                     send_Text@s:
   330     0022                     pos_Lcd@x:	
   331                           ; 1 bytes @ 0x2
   332                           
   333                           
   334                           ; 1 bytes @ 0x2
   335     0022                     	ds	1
   336     0023                     send_Text@i:
   337     0023                     pos_Lcd@pos:	
   338                           ; 1 bytes @ 0x3
   339                           
   340                           
   341                           ; 1 bytes @ 0x3
   342     0023                     	ds	1
   343     0024                     ??_main:
   344                           
   345                           ; 1 bytes @ 0x4
   346     0024                     	ds	3
   347     0027                     main@i:
   348                           
   349                           ; 1 bytes @ 0x7
   350     0027                     	ds	1
   351                           
   352                           	psect	maintext
   353     000D                     __pmaintext:	
   354 ;;
   355 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   356 ;;
   357 ;; *************** function _main *****************
   358 ;; Defined at:
   359 ;;		line 177 in file "main.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;		None
   362 ;; Auto vars:     Size  Location     Type
   363 ;;  i               1    7[BANK0 ] unsigned char 
   364 ;; Return value:  Size  Location     Type
   365 ;;                  1    wreg      void 
   366 ;; Registers used:
   367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   368 ;; Tracked objects:
   369 ;;		On entry : B00/0
   370 ;;		On exit  : 0/0
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMMON   BANK0   BANK1
   373 ;;      Params:         0       0       0
   374 ;;      Locals:         0       1       0
   375 ;;      Temps:          0       3       0
   376 ;;      Totals:         0       4       0
   377 ;;Total ram usage:        4 bytes
   378 ;; Hardware stack levels required when called: 4
   379 ;; This function calls:
   380 ;;		_init_Lcd
   381 ;;		_init_Pic
   382 ;;		_pos_Lcd
   383 ;;		_reset_Lcd
   384 ;;		_send_Nibbles
   385 ;;		_send_Text
   386 ;; This function is called by:
   387 ;;		Startup code after reset
   388 ;; This function uses a non-reentrant model
   389 ;;
   390                           
   391     000D                     _main:	
   392                           ;psect for function _main
   393                           
   394     000D                     l917:	
   395                           ;incstack = 0
   396                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   397                           
   398                           
   399                           ;main.c: 178:     init_Pic();
   400     000D  2174               	fcall	_init_Pic
   401                           
   402                           ;main.c: 179:     init_Lcd();
   403     000E  20D3               	fcall	_init_Lcd
   404     000F                     l78:	
   405                           ;main.c: 180:     while (1) {
   406                           
   407                           
   408                           ;main.c: 181:         pos_Lcd(1, 2);
   409     000F  3002               	movlw	2
   410     0010  00FA               	movwf	pos_Lcd@y
   411     0011  3001               	movlw	1
   412     0012  211A               	fcall	_pos_Lcd
   413     0013                     l919:
   414                           
   415                           ;main.c: 182:         for (char i = 0; i < sizeof (myText1) - 1; i++) {
   416     0013  1283               	bcf	3,5	;RP0=0, select bank0
   417     0014  01A7               	clrf	main@i
   418     0015                     l925:
   419                           
   420                           ;main.c: 183:             send_Nibbles(myText1[i], 1);
   421     0015  01F5               	clrf	send_Nibbles@rs
   422     0016  0AF5               	incf	send_Nibbles@rs,f
   423     0017  0827               	movf	main@i,w
   424     0018  3E01               	addlw	low ((_myText1-__stringbase)| (0+32768))
   425     0019  0084               	movwf	4
   426     001A  20A8               	fcall	stringdir
   427     001B  20FA               	fcall	_send_Nibbles
   428     001C                     l927:
   429                           
   430                           ;main.c: 184:         }
   431     001C  3001               	movlw	1
   432     001D  1283               	bcf	3,5	;RP0=0, select bank0
   433     001E  00A4               	movwf	??_main
   434     001F  0824               	movf	??_main,w
   435     0020  07A7               	addwf	main@i,f
   436     0021                     l929:
   437     0021  300F               	movlw	15
   438     0022  0227               	subwf	main@i,w
   439     0023  1C03               	skipc
   440     0024  2826               	goto	u181
   441     0025  2827               	goto	u180
   442     0026                     u181:
   443     0026  2815               	goto	l925
   444     0027                     u180:
   445     0027                     l931:
   446                           
   447                           ;main.c: 185:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   448     0027  3006               	movlw	6
   449     0028  1283               	bcf	3,5	;RP0=0, select bank0
   450     0029  00A6               	movwf	??_main+2
   451     002A  3013               	movlw	19
   452     002B  00A5               	movwf	??_main+1
   453     002C  30AD               	movlw	173
   454     002D  00A4               	movwf	??_main
   455     002E                     u197:
   456     002E  0BA4               	decfsz	??_main,f
   457     002F  282E               	goto	u197
   458     0030  0BA5               	decfsz	??_main+1,f
   459     0031  282E               	goto	u197
   460     0032  0BA6               	decfsz	??_main+2,f
   461     0033  282E               	goto	u197
   462     0034  0000               	nop
   463     0035                     l933:
   464                           
   465                           ;main.c: 186:         pos_Lcd(2, 1);
   466     0035  01FA               	clrf	pos_Lcd@y
   467     0036  0AFA               	incf	pos_Lcd@y,f
   468     0037  3002               	movlw	2
   469     0038  211A               	fcall	_pos_Lcd
   470     0039                     l935:
   471                           
   472                           ;main.c: 187:         send_Text(myText2, sizeof (myText2));
   473     0039  3010               	movlw	16
   474     003A  00FA               	movwf	send_Text@n
   475     003B  3016               	movlw	(low ((_myText2-__stringbase)| (0+32768)))& (0+255)
   476     003C  204E               	fcall	_send_Text
   477     003D                     l937:
   478                           
   479                           ;main.c: 188:         _delay((unsigned long)((3000)*(4000000/4000.0)));
   480     003D  3010               	movlw	16
   481     003E  1283               	bcf	3,5	;RP0=0, select bank0
   482     003F  00A6               	movwf	??_main+2
   483     0040  3039               	movlw	57
   484     0041  00A5               	movwf	??_main+1
   485     0042  300D               	movlw	13
   486     0043  00A4               	movwf	??_main
   487     0044                     u207:
   488     0044  0BA4               	decfsz	??_main,f
   489     0045  2844               	goto	u207
   490     0046  0BA5               	decfsz	??_main+1,f
   491     0047  2844               	goto	u207
   492     0048  0BA6               	decfsz	??_main+2,f
   493     0049  2844               	goto	u207
   494     004A  0000               	nop
   495     004B                     l939:
   496                           
   497                           ;main.c: 189:         reset_Lcd();
   498     004B  2137               	fcall	_reset_Lcd
   499     004C  280F               	goto	l78
   500     004D  280A               	ljmp	start
   501     004E                     __end_of_main:
   502                           
   503                           	psect	text1
   504     004E                     __ptext1:	
   505 ;; *************** function _send_Text *****************
   506 ;; Defined at:
   507 ;;		line 128 in file "main.c"
   508 ;; Parameters:    Size  Location     Type
   509 ;;  s               1    wreg     PTR const unsigned char 
   510 ;;		 -> myText2(16), 
   511 ;;  n               1   10[COMMON] unsigned char 
   512 ;; Auto vars:     Size  Location     Type
   513 ;;  s               1    2[BANK0 ] PTR const unsigned char 
   514 ;;		 -> myText2(16), 
   515 ;;  i               1    3[BANK0 ] unsigned char 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1
   525 ;;      Params:         1       0       0
   526 ;;      Locals:         0       2       0
   527 ;;      Temps:          0       2       0
   528 ;;      Totals:         1       4       0
   529 ;;Total ram usage:        5 bytes
   530 ;; Hardware stack levels used: 1
   531 ;; Hardware stack levels required when called: 3
   532 ;; This function calls:
   533 ;;		_send_Nibbles
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539     004E                     _send_Text:	
   540                           ;psect for function _send_Text
   541                           
   542                           
   543                           ;incstack = 0
   544                           ; Regs used in _send_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   545                           ;send_Text@s stored from wreg
   546     004E  1283               	bcf	3,5	;RP0=0, select bank0
   547     004F  00A2               	movwf	send_Text@s
   548     0050                     l871:
   549                           
   550                           ;main.c: 129:     for (unsigned char i = 0; i < n - 1; i++) {
   551     0050  01A3               	clrf	send_Text@i
   552     0051  2869               	goto	l879
   553     0052                     l873:
   554                           
   555                           ;main.c: 130:         send_Nibbles(s[i], 1);
   556     0052  01F5               	clrf	send_Nibbles@rs
   557     0053  0AF5               	incf	send_Nibbles@rs,f
   558     0054  1283               	bcf	3,5	;RP0=0, select bank0
   559     0055  0823               	movf	send_Text@i,w
   560     0056  0722               	addwf	send_Text@s,w
   561     0057  0084               	movwf	4
   562     0058  20A8               	fcall	stringdir
   563     0059  20FA               	fcall	_send_Nibbles
   564     005A                     l875:
   565                           
   566                           ;main.c: 131:         _delay((unsigned long)((5)*(4000000/4000.0)));
   567     005A  3007               	movlw	7
   568     005B  1283               	bcf	3,5	;RP0=0, select bank0
   569     005C  00A1               	movwf	??_send_Text+1
   570     005D  307C               	movlw	124
   571     005E  00A0               	movwf	??_send_Text
   572     005F                     u217:
   573     005F  0BA0               	decfsz	??_send_Text,f
   574     0060  285F               	goto	u217
   575     0061  0BA1               	decfsz	??_send_Text+1,f
   576     0062  285F               	goto	u217
   577     0063  2864               	nop2
   578     0064                     l877:
   579                           
   580                           ;main.c: 132:     }
   581     0064  3001               	movlw	1
   582     0065  1283               	bcf	3,5	;RP0=0, select bank0
   583     0066  00A0               	movwf	??_send_Text
   584     0067  0820               	movf	??_send_Text,w
   585     0068  07A3               	addwf	send_Text@i,f
   586     0069                     l879:
   587     0069  087A               	movf	send_Text@n,w
   588     006A  3EFF               	addlw	255
   589     006B  00A0               	movwf	??_send_Text
   590     006C  30FF               	movlw	255
   591     006D  1803               	skipnc
   592     006E  3000               	movlw	0
   593     006F  00A1               	movwf	??_send_Text+1
   594     0070  0821               	movf	??_send_Text+1,w
   595     0071  3A80               	xorlw	128
   596     0072  3C80               	sublw	128
   597     0073  1D03               	skipz
   598     0074  2877               	goto	u165
   599     0075  0820               	movf	??_send_Text,w
   600     0076  0223               	subwf	send_Text@i,w
   601     0077                     u165:
   602     0077  1C03               	skipc
   603     0078  287A               	goto	u161
   604     0079  287B               	goto	u160
   605     007A                     u161:
   606     007A  2852               	goto	l873
   607     007B                     u160:
   608     007B                     l63:
   609     007B  0008               	return
   610     007C                     __end_of_send_Text:
   611                           
   612                           	psect	text2
   613     0137                     __ptext2:	
   614 ;; *************** function _reset_Lcd *****************
   615 ;; Defined at:
   616 ;;		line 168 in file "main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, status,2, status,0, pclath, cstack
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1
   630 ;;      Params:         0       0       0
   631 ;;      Locals:         0       0       0
   632 ;;      Temps:          2       0       0
   633 ;;      Totals:         2       0       0
   634 ;;Total ram usage:        2 bytes
   635 ;; Hardware stack levels used: 1
   636 ;; Hardware stack levels required when called: 3
   637 ;; This function calls:
   638 ;;		_send_Nibbles
   639 ;; This function is called by:
   640 ;;		_main
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644     0137                     _reset_Lcd:	
   645                           ;psect for function _reset_Lcd
   646                           
   647     0137                     l909:	
   648                           ;incstack = 0
   649                           ; Regs used in _reset_Lcd: [wreg+status,2+status,0+pclath+cstack]
   650                           
   651                           
   652                           ;main.c: 169:     send_Nibbles(lcdClear, 0);
   653     0137  01F5               	clrf	send_Nibbles@rs
   654     0138  3001               	movlw	1
   655     0139  20FA               	fcall	_send_Nibbles
   656     013A                     l911:
   657                           
   658                           ;main.c: 170:     _delay((unsigned long)((2)*(4000000/4000.0)));
   659     013A  3003               	movlw	3
   660     013B  00FB               	movwf	??_reset_Lcd+1
   661     013C  3097               	movlw	151
   662     013D  00FA               	movwf	??_reset_Lcd
   663     013E                     u227:
   664     013E  0BFA               	decfsz	??_reset_Lcd,f
   665     013F  293E               	goto	u227
   666     0140  0BFB               	decfsz	??_reset_Lcd+1,f
   667     0141  293E               	goto	u227
   668     0142  2943               	nop2
   669     0143                     l913:
   670                           
   671                           ;main.c: 171:     send_Nibbles(lcdHome, 0);
   672     0143  01F5               	clrf	send_Nibbles@rs
   673     0144  3002               	movlw	2
   674     0145  20FA               	fcall	_send_Nibbles
   675                           
   676                           ;main.c: 172:     _delay((unsigned long)((2)*(4000000/4000.0)));
   677     0146  3003               	movlw	3
   678     0147  00FB               	movwf	??_reset_Lcd+1
   679     0148  3097               	movlw	151
   680     0149  00FA               	movwf	??_reset_Lcd
   681     014A                     u237:
   682     014A  0BFA               	decfsz	??_reset_Lcd,f
   683     014B  294A               	goto	u237
   684     014C  0BFB               	decfsz	??_reset_Lcd+1,f
   685     014D  294A               	goto	u237
   686     014E  294F               	nop2
   687     014F                     l73:
   688     014F  0008               	return
   689     0150                     __end_of_reset_Lcd:
   690                           
   691                           	psect	text3
   692     011A                     __ptext3:	
   693 ;; *************** function _pos_Lcd *****************
   694 ;; Defined at:
   695 ;;		line 138 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  x               1    wreg     unsigned char 
   698 ;;  y               1   10[COMMON] unsigned char 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  x               1    2[BANK0 ] unsigned char 
   701 ;;  pos             1    3[BANK0 ] unsigned char 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0, pclath, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1
   711 ;;      Params:         1       0       0
   712 ;;      Locals:         0       2       0
   713 ;;      Temps:          0       2       0
   714 ;;      Totals:         1       4       0
   715 ;;Total ram usage:        5 bytes
   716 ;; Hardware stack levels used: 1
   717 ;; Hardware stack levels required when called: 3
   718 ;; This function calls:
   719 ;;		_send_Nibbles
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725     011A                     _pos_Lcd:	
   726                           ;psect for function _pos_Lcd
   727                           
   728                           
   729                           ;incstack = 0
   730                           ; Regs used in _pos_Lcd: [wreg+status,2+status,0+pclath+cstack]
   731                           ;pos_Lcd@x stored from wreg
   732     011A  1283               	bcf	3,5	;RP0=0, select bank0
   733     011B  00A2               	movwf	pos_Lcd@x
   734     011C                     l881:
   735                           
   736                           ;main.c: 139:     char pos = 127 + y;
   737     011C  087A               	movf	pos_Lcd@y,w
   738     011D  3E7F               	addlw	127
   739     011E  00A3               	movwf	pos_Lcd@pos
   740                           
   741                           ;main.c: 140:     if (x == 2) pos += 64;
   742     011F  3002               	movlw	2
   743     0120  0622               	xorwf	pos_Lcd@x,w
   744     0121  1D03               	btfss	3,2
   745     0122  2924               	goto	u171
   746     0123  2925               	goto	u170
   747     0124                     u171:
   748     0124  2929               	goto	l885
   749     0125                     u170:
   750     0125                     l883:
   751     0125  3040               	movlw	64
   752     0126  00A0               	movwf	??_pos_Lcd
   753     0127  0820               	movf	??_pos_Lcd,w
   754     0128  07A3               	addwf	pos_Lcd@pos,f
   755     0129                     l885:
   756                           
   757                           ;main.c: 141:     send_Nibbles(pos, 0);
   758     0129  01F5               	clrf	send_Nibbles@rs
   759     012A  0823               	movf	pos_Lcd@pos,w
   760     012B  20FA               	fcall	_send_Nibbles
   761     012C                     l887:
   762                           
   763                           ;main.c: 142:     _delay((unsigned long)((2)*(4000000/4000.0)));
   764     012C  3003               	movlw	3
   765     012D  1283               	bcf	3,5	;RP0=0, select bank0
   766     012E  00A1               	movwf	??_pos_Lcd+1
   767     012F  3097               	movlw	151
   768     0130  00A0               	movwf	??_pos_Lcd
   769     0131                     u247:
   770     0131  0BA0               	decfsz	??_pos_Lcd,f
   771     0132  2931               	goto	u247
   772     0133  0BA1               	decfsz	??_pos_Lcd+1,f
   773     0134  2931               	goto	u247
   774     0135  0000               	nop
   775     0136                     l67:
   776     0136  0008               	return
   777     0137                     __end_of_pos_Lcd:
   778                           
   779                           	psect	text4
   780     0174                     __ptext4:	
   781 ;; *************** function _init_Pic *****************
   782 ;; Defined at:
   783 ;;		line 73 in file "main.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, status,2, status,0
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1
   797 ;;      Params:         0       0       0
   798 ;;      Locals:         0       0       0
   799 ;;      Temps:          0       0       0
   800 ;;      Totals:         0       0       0
   801 ;;Total ram usage:        0 bytes
   802 ;; Hardware stack levels used: 1
   803 ;; Hardware stack levels required when called: 1
   804 ;; This function calls:
   805 ;;		Nothing
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811     0174                     _init_Pic:	
   812                           ;psect for function _init_Pic
   813                           
   814     0174                     l859:	
   815                           ;incstack = 0
   816                           ; Regs used in _init_Pic: [wreg+status,2+status,0]
   817                           
   818                           
   819                           ;main.c: 74:     OSCCONbits.IRCF = 0b110;
   820     0174  1683               	bsf	3,5	;RP0=1, select bank1
   821     0175  080F               	movf	15,w	;volatile
   822     0176  398F               	andlw	-113
   823     0177  3860               	iorlw	96
   824     0178  008F               	movwf	15	;volatile
   825     0179                     l861:
   826                           
   827                           ;main.c: 75:     CMCON0 = 0b111;
   828     0179  3007               	movlw	7
   829     017A  1283               	bcf	3,5	;RP0=0, select bank0
   830     017B  0099               	movwf	25	;volatile
   831     017C                     l863:
   832                           
   833                           ;main.c: 76:     ANSEL = 0;
   834     017C  1683               	bsf	3,5	;RP0=1, select bank1
   835     017D  019F               	clrf	31	;volatile
   836     017E                     l865:
   837                           
   838                           ;main.c: 77:     TRISIO = 0b00011100;
   839     017E  301C               	movlw	28
   840     017F  0085               	movwf	5	;volatile
   841     0180                     l867:
   842                           
   843                           ;main.c: 78:     GPIO = 0;
   844     0180  1283               	bcf	3,5	;RP0=0, select bank0
   845     0181  0185               	clrf	5	;volatile
   846     0182                     l45:
   847     0182  0008               	return
   848     0183                     __end_of_init_Pic:
   849                           
   850                           	psect	text5
   851     00D3                     __ptext5:	
   852 ;; *************** function _init_Lcd *****************
   853 ;; Defined at:
   854 ;;		line 149 in file "main.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1
   868 ;;      Params:         0       0       0
   869 ;;      Locals:         0       0       0
   870 ;;      Temps:          2       0       0
   871 ;;      Totals:         2       0       0
   872 ;;Total ram usage:        2 bytes
   873 ;; Hardware stack levels used: 1
   874 ;; Hardware stack levels required when called: 3
   875 ;; This function calls:
   876 ;;		_do_Lcden
   877 ;;		_do_Shiftr
   878 ;;		_send_Nibbles
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884     00D3                     _init_Lcd:	
   885                           ;psect for function _init_Lcd
   886                           
   887     00D3                     l891:	
   888                           ;incstack = 0
   889                           ; Regs used in _init_Lcd: [wreg+status,2+status,0+pclath+cstack]
   890                           
   891                           
   892                           ;main.c: 150:     _delay((unsigned long)((100)*(4000000/4000.0)));
   893     00D3  3082               	movlw	130
   894     00D4  00FB               	movwf	??_init_Lcd+1
   895     00D5  30DD               	movlw	221
   896     00D6  00FA               	movwf	??_init_Lcd
   897     00D7                     u257:
   898     00D7  0BFA               	decfsz	??_init_Lcd,f
   899     00D8  28D7               	goto	u257
   900     00D9  0BFB               	decfsz	??_init_Lcd+1,f
   901     00DA  28D7               	goto	u257
   902     00DB  28DC               	nop2
   903     00DC                     l893:
   904                           
   905                           ;main.c: 151:     do_Shiftr(0x0);
   906     00DC  3000               	movlw	0
   907     00DD  207C               	fcall	_do_Shiftr
   908     00DE                     l895:
   909                           
   910                           ;main.c: 152:     _delay((unsigned long)((5)*(4000000/4000000.0)));
   911     00DE  28DF               	nop2	;2 cycle nop
   912     00DF  28E0               	nop2	;2 cycle nop
   913     00E0  0000               	nop
   914     00E1                     l897:
   915                           
   916                           ;main.c: 153:     do_Shiftr(0x02);
   917     00E1  3002               	movlw	2
   918     00E2  207C               	fcall	_do_Shiftr
   919     00E3                     l899:
   920                           
   921                           ;main.c: 154:     do_Lcden();
   922     00E3  2150               	fcall	_do_Lcden
   923     00E4                     l901:
   924                           
   925                           ;main.c: 155:     _delay((unsigned long)((50)*(4000000/4000000.0)));
   926     00E4  3010               	movlw	16
   927     00E5  00FA               	movwf	??_init_Lcd
   928     00E6                     u267:
   929     00E6  0BFA               	decfsz	??_init_Lcd,f
   930     00E7  28E6               	goto	u267
   931     00E8  0000               	nop
   932                           
   933                           ;main.c: 158:     send_Nibbles(lcdCon, 0);
   934     00E9  01F5               	clrf	send_Nibbles@rs
   935     00EA  300E               	movlw	14
   936     00EB  20FA               	fcall	_send_Nibbles
   937     00EC                     l903:
   938                           
   939                           ;main.c: 159:     _delay((unsigned long)((50)*(4000000/4000000.0)));
   940     00EC  3010               	movlw	16
   941     00ED  00FA               	movwf	??_init_Lcd
   942     00EE                     u277:
   943     00EE  0BFA               	decfsz	??_init_Lcd,f
   944     00EF  28EE               	goto	u277
   945     00F0  0000               	nop
   946     00F1                     l905:
   947                           
   948                           ;main.c: 160:     send_Nibbles(lcdFunc, 0);
   949     00F1  01F5               	clrf	send_Nibbles@rs
   950     00F2  3028               	movlw	40
   951     00F3  20FA               	fcall	_send_Nibbles
   952                           
   953                           ;main.c: 161:     _delay((unsigned long)((50)*(4000000/4000000.0)));
   954     00F4  3010               	movlw	16
   955     00F5  00FA               	movwf	??_init_Lcd
   956     00F6                     u287:
   957     00F6  0BFA               	decfsz	??_init_Lcd,f
   958     00F7  28F6               	goto	u287
   959     00F8  0000               	nop
   960     00F9                     l70:
   961     00F9  0008               	return
   962     00FA                     __end_of_init_Lcd:
   963                           
   964                           	psect	text6
   965     00FA                     __ptext6:	
   966 ;; *************** function _send_Nibbles *****************
   967 ;; Defined at:
   968 ;;		line 84 in file "main.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  data            1    wreg     unsigned char 
   971 ;;  rs              1    5[COMMON] _Bool 
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  data            1    7[COMMON] unsigned char 
   974 ;;  hiB             1    9[COMMON] unsigned char 
   975 ;;  lowB            1    8[COMMON] unsigned char 
   976 ;;  mask            1    0        unsigned char 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, status,2, status,0, pclath, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1
   986 ;;      Params:         1       0       0
   987 ;;      Locals:         3       0       0
   988 ;;      Temps:          1       0       0
   989 ;;      Totals:         5       0       0
   990 ;;Total ram usage:        5 bytes
   991 ;; Hardware stack levels used: 1
   992 ;; Hardware stack levels required when called: 2
   993 ;; This function calls:
   994 ;;		_do_Lcden
   995 ;;		_do_Shiftr
   996 ;; This function is called by:
   997 ;;		_send_Text
   998 ;;		_pos_Lcd
   999 ;;		_init_Lcd
  1000 ;;		_reset_Lcd
  1001 ;;		_main
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005     00FA                     _send_Nibbles:	
  1006                           ;psect for function _send_Nibbles
  1007                           
  1008                           
  1009                           ;incstack = 0
  1010                           ; Regs used in _send_Nibbles: [wreg+status,2+status,0+pclath+cstack]
  1011                           ;send_Nibbles@data stored from wreg
  1012     00FA  00F7               	movwf	send_Nibbles@data
  1013     00FB                     l839:
  1014     00FB                     l841:
  1015                           
  1016                           ;main.c: 86:     hiB = data >> 4;
  1017     00FB  0877               	movf	send_Nibbles@data,w
  1018     00FC  00F6               	movwf	??_send_Nibbles
  1019     00FD  3004               	movlw	4
  1020     00FE                     u145:
  1021     00FE  1003               	clrc
  1022     00FF  0CF6               	rrf	??_send_Nibbles,f
  1023     0100  3EFF               	addlw	-1
  1024     0101  1D03               	skipz
  1025     0102  28FE               	goto	u145
  1026     0103  0876               	movf	??_send_Nibbles,w
  1027     0104  00F9               	movwf	send_Nibbles@hiB
  1028     0105                     l843:
  1029                           
  1030                           ;main.c: 87:     lowB = data & 0x0F;
  1031     0105  0877               	movf	send_Nibbles@data,w
  1032     0106  390F               	andlw	15
  1033     0107  00F8               	movwf	send_Nibbles@lowB
  1034     0108                     l845:
  1035                           
  1036                           ;main.c: 88:     if (rs) {
  1037     0108  0875               	movf	send_Nibbles@rs,w
  1038     0109  1903               	btfsc	3,2
  1039     010A  290C               	goto	u151
  1040     010B  290D               	goto	u150
  1041     010C                     u151:
  1042     010C  2913               	goto	l849
  1043     010D                     u150:
  1044     010D                     l847:
  1045                           
  1046                           ;main.c: 89:         hiB = hiB | mask;
  1047     010D  0879               	movf	send_Nibbles@hiB,w
  1048     010E  3810               	iorlw	16
  1049     010F  00F9               	movwf	send_Nibbles@hiB
  1050                           
  1051                           ;main.c: 90:         lowB = lowB | mask;
  1052     0110  0878               	movf	send_Nibbles@lowB,w
  1053     0111  3810               	iorlw	16
  1054     0112  00F8               	movwf	send_Nibbles@lowB
  1055     0113                     l849:
  1056                           
  1057                           ;main.c: 92:     do_Shiftr(hiB);
  1058     0113  0879               	movf	send_Nibbles@hiB,w
  1059     0114  207C               	fcall	_do_Shiftr
  1060     0115                     l851:
  1061                           
  1062                           ;main.c: 93:     do_Lcden();
  1063     0115  2150               	fcall	_do_Lcden
  1064     0116                     l853:
  1065                           
  1066                           ;main.c: 94:     do_Shiftr(lowB);
  1067     0116  0878               	movf	send_Nibbles@lowB,w
  1068     0117  207C               	fcall	_do_Shiftr
  1069     0118                     l855:
  1070                           
  1071                           ;main.c: 95:     do_Lcden();
  1072     0118  2150               	fcall	_do_Lcden
  1073     0119                     l49:
  1074     0119  0008               	return
  1075     011A                     __end_of_send_Nibbles:
  1076                           
  1077                           	psect	text7
  1078     007C                     __ptext7:	
  1079 ;; *************** function _do_Shiftr *****************
  1080 ;; Defined at:
  1081 ;;		line 100 in file "main.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;  value           1    wreg     unsigned char 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  value           1    3[COMMON] unsigned char 
  1086 ;;  i               1    4[COMMON] unsigned char 
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMMON   BANK0   BANK1
  1096 ;;      Params:         0       0       0
  1097 ;;      Locals:         2       0       0
  1098 ;;      Temps:          1       0       0
  1099 ;;      Totals:         3       0       0
  1100 ;;Total ram usage:        3 bytes
  1101 ;; Hardware stack levels used: 1
  1102 ;; Hardware stack levels required when called: 1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_send_Nibbles
  1107 ;;		_init_Lcd
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111     007C                     _do_Shiftr:	
  1112                           ;psect for function _do_Shiftr
  1113                           
  1114                           
  1115                           ;incstack = 0
  1116                           ; Regs used in _do_Shiftr: [wreg+status,2+status,0]
  1117                           ;do_Shiftr@value stored from wreg
  1118     007C  00F3               	movwf	do_Shiftr@value
  1119     007D                     l811:
  1120                           
  1121                           ;main.c: 101:     for (char i = 0; i < 8; i++) {
  1122     007D  01F4               	clrf	do_Shiftr@i
  1123     007E                     l52:
  1124                           
  1125                           ;main.c: 102:         GPIObits.GP5 = (value & 0x80) ? 1 : 0;
  1126     007E  1BF3               	btfsc	do_Shiftr@value,7
  1127     007F  2881               	goto	u111
  1128     0080  2884               	goto	u110
  1129     0081                     u111:
  1130     0081  1283               	bcf	3,5	;RP0=0, select bank0
  1131     0082  1685               	bsf	5,5	;volatile
  1132     0083  2886               	goto	u124
  1133     0084                     u110:
  1134     0084  1283               	bcf	3,5	;RP0=0, select bank0
  1135     0085  1285               	bcf	5,5	;volatile
  1136     0086                     u124:
  1137     0086                     l817:
  1138                           
  1139                           ;main.c: 103:         value <<= 1;
  1140     0086  1003               	clrc
  1141     0087  0DF3               	rlf	do_Shiftr@value,f
  1142                           
  1143                           ;main.c: 104:         _delay((unsigned long)((10)*(4000000/4000000.0)));
  1144     0088  3003               	movlw	3
  1145     0089  00F2               	movwf	??_do_Shiftr
  1146     008A                     u297:
  1147     008A  0BF2               	decfsz	??_do_Shiftr,f
  1148     008B  288A               	goto	u297
  1149     008C                     l819:
  1150                           
  1151                           ;main.c: 105:         GPIObits.GP0 = 1;
  1152     008C  1283               	bcf	3,5	;RP0=0, select bank0
  1153     008D  1405               	bsf	5,0	;volatile
  1154     008E                     l821:
  1155                           
  1156                           ;main.c: 106:         _delay((unsigned long)((5)*(4000000/4000000.0)));
  1157     008E  288F               	nop2	;2 cycle nop
  1158     008F  2890               	nop2	;2 cycle nop
  1159     0090  0000               	nop
  1160     0091                     l823:
  1161                           
  1162                           ;main.c: 107:         GPIObits.GP0 = 0;
  1163     0091  1283               	bcf	3,5	;RP0=0, select bank0
  1164     0092  1005               	bcf	5,0	;volatile
  1165     0093                     l825:
  1166                           
  1167                           ;main.c: 108:         _delay((unsigned long)((5)*(4000000/4000000.0)));
  1168     0093  2894               	nop2	;2 cycle nop
  1169     0094  2895               	nop2	;2 cycle nop
  1170     0095  0000               	nop
  1171     0096                     l827:
  1172                           
  1173                           ;main.c: 109:     }
  1174     0096  3001               	movlw	1
  1175     0097  00F2               	movwf	??_do_Shiftr
  1176     0098  0872               	movf	??_do_Shiftr,w
  1177     0099  07F4               	addwf	do_Shiftr@i,f
  1178     009A                     l829:
  1179     009A  3008               	movlw	8
  1180     009B  0274               	subwf	do_Shiftr@i,w
  1181     009C  1C03               	skipc
  1182     009D  289F               	goto	u131
  1183     009E  28A0               	goto	u130
  1184     009F                     u131:
  1185     009F  287E               	goto	l52
  1186     00A0                     u130:
  1187     00A0                     l53:
  1188                           
  1189                           ;main.c: 110:     GPIObits.GP0 = 1;
  1190     00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1191     00A1  1405               	bsf	5,0	;volatile
  1192                           
  1193                           ;main.c: 111:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  1194     00A2  28A3               	nop2	;2 cycle nop
  1195     00A3  28A4               	nop2	;2 cycle nop
  1196     00A4  0000               	nop
  1197                           
  1198                           ;main.c: 112:     GPIObits.GP0 = 0;
  1199     00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1200     00A6  1005               	bcf	5,0	;volatile
  1201     00A7                     l54:	
  1202                           ;main.c: 113:     return;
  1203                           
  1204     00A7  0008               	return
  1205     00A8                     __end_of_do_Shiftr:
  1206                           
  1207                           	psect	text8
  1208     0150                     __ptext8:	
  1209 ;; *************** function _do_Lcden *****************
  1210 ;; Defined at:
  1211 ;;		line 116 in file "main.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1
  1225 ;;      Params:         0       0       0
  1226 ;;      Locals:         0       0       0
  1227 ;;      Temps:          1       0       0
  1228 ;;      Totals:         1       0       0
  1229 ;;Total ram usage:        1 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 1
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_send_Nibbles
  1236 ;;		_init_Lcd
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240     0150                     _do_Lcden:	
  1241                           ;psect for function _do_Lcden
  1242                           
  1243     0150                     l831:	
  1244                           ;incstack = 0
  1245                           ; Regs used in _do_Lcden: [wreg]
  1246                           
  1247                           
  1248                           ;main.c: 117:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  1249     0150  2951               	nop2	;2 cycle nop
  1250     0151  2952               	nop2	;2 cycle nop
  1251     0152  0000               	nop
  1252                           
  1253                           ;main.c: 118:     GPIObits.GP1 = 1;
  1254     0153  1283               	bcf	3,5	;RP0=0, select bank0
  1255     0154  1485               	bsf	5,1	;volatile
  1256     0155                     l833:
  1257                           
  1258                           ;main.c: 119:     _delay((unsigned long)((15)*(4000000/4000000.0)));
  1259     0155  3004               	movlw	4
  1260     0156  00F2               	movwf	??_do_Lcden
  1261     0157                     u307:
  1262     0157  0BF2               	decfsz	??_do_Lcden,f
  1263     0158  2957               	goto	u307
  1264     0159  295A               	nop2
  1265     015A                     l835:
  1266                           
  1267                           ;main.c: 120:     GPIObits.GP1 = 0;
  1268     015A  1283               	bcf	3,5	;RP0=0, select bank0
  1269     015B  1085               	bcf	5,1	;volatile
  1270                           
  1271                           ;main.c: 121:     _delay((unsigned long)((15)*(4000000/4000000.0)));
  1272     015C  3004               	movlw	4
  1273     015D  00F2               	movwf	??_do_Lcden
  1274     015E                     u317:
  1275     015E  0BF2               	decfsz	??_do_Lcden,f
  1276     015F  295E               	goto	u317
  1277     0160  2961               	nop2
  1278     0161                     l57:
  1279     0161  0008               	return
  1280     0162                     __end_of_do_Lcden:
  1281                           
  1282                           	psect	text9
  1283     0162                     __ptext9:	
  1284 ;; *************** function _isr *****************
  1285 ;; Defined at:
  1286 ;;		line 63 in file "main.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		None
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1
  1300 ;;      Params:         0       0       0
  1301 ;;      Locals:         0       0       0
  1302 ;;      Temps:          2       0       0
  1303 ;;      Totals:         2       0       0
  1304 ;;Total ram usage:        2 bytes
  1305 ;; Hardware stack levels used: 1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		Interrupt level 1
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313     0162                     _isr:	
  1314                           ;psect for function _isr
  1315                           
  1316     0162                     i1l781:
  1317                           
  1318                           ;main.c: 65:     if (INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  1319     0162  1E8B               	btfss	11,5	;volatile
  1320     0163  2965               	goto	u8_21
  1321     0164  2966               	goto	u8_20
  1322     0165                     u8_21:
  1323     0165  296D               	goto	i1l42
  1324     0166                     u8_20:
  1325     0166                     i1l783:
  1326     0166  1D0B               	btfss	11,2	;volatile
  1327     0167  2969               	goto	u9_21
  1328     0168  296A               	goto	u9_20
  1329     0169                     u9_21:
  1330     0169  296D               	goto	i1l42
  1331     016A                     u9_20:
  1332     016A                     i1l785:
  1333                           
  1334                           ;main.c: 66:         __nop();
  1335     016A  0000               	nop
  1336                           
  1337                           ;main.c: 67:         __nop();
  1338     016B  0000               	nop
  1339                           
  1340                           ;main.c: 68:         INTCONbits.TMR0IF = 0;
  1341     016C  110B               	bcf	11,2	;volatile
  1342     016D                     i1l42:
  1343     016D  0871               	movf	??_isr+1,w
  1344     016E  008A               	movwf	10
  1345     016F  0E70               	swapf	??_isr,w
  1346     0170  0083               	movwf	3
  1347     0171  0EFE               	swapf	btemp,f
  1348     0172  0E7E               	swapf	btemp,w
  1349     0173  0009               	retfie
  1350     0174                     __end_of_isr:
  1351     007E                     btemp	set	126	;btemp
  1352     007E                     wtemp0	set	126
  1353                           
  1354                           	psect	intentry
  1355     0004                     __pintentry:	
  1356                           ;incstack = 0
  1357                           ; Regs used in _isr: []
  1358                           
  1359     0004                     interrupt_function:
  1360     007E                     saved_w	set	btemp
  1361     0004  00FE               	movwf	btemp
  1362     0005  0E03               	swapf	3,w
  1363     0006  00F0               	movwf	??_isr
  1364     0007  080A               	movf	10,w
  1365     0008  00F1               	movwf	??_isr+1
  1366     0009  2962               	ljmp	_isr
  1367                           
  1368                           	psect	idloc
  1369                           
  1370                           ;Config register IDLOC0 @ 0x2000
  1371                           ;	unspecified, using default values
  1372     2000                     	org	8192
  1373     2000  3FFF               	dw	16383
  1374                           
  1375                           ;Config register IDLOC1 @ 0x2001
  1376                           ;	unspecified, using default values
  1377     2001                     	org	8193
  1378     2001  3FFF               	dw	16383
  1379                           
  1380                           ;Config register IDLOC2 @ 0x2002
  1381                           ;	unspecified, using default values
  1382     2002                     	org	8194
  1383     2002  3FFF               	dw	16383
  1384                           
  1385                           ;Config register IDLOC3 @ 0x2003
  1386                           ;	unspecified, using default values
  1387     2003                     	org	8195
  1388     2003  3FFF               	dw	16383
  1389                           
  1390                           	psect	config
  1391                           
  1392                           ;Config register CONFIG @ 0x2007
  1393                           ;	Oscillator Selection bits
  1394                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  1395                           ;	Watchdog Timer Enable bit
  1396                           ;	WDTE = OFF, WDT disabled
  1397                           ;	Power-up Timer Enable bit
  1398                           ;	PWRTE = ON, PWRT enabled
  1399                           ;	MCLR Pin Function Select bit
  1400                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  1401                           ;	Code Protection bit
  1402                           ;	CP = OFF, Program memory code protection is disabled
  1403                           ;	Data Code Protection bit
  1404                           ;	CPD = OFF, Data memory code protection is disabled
  1405                           ;	Brown Out Detect
  1406                           ;	BOREN = OFF, BOR disabled
  1407                           ;	Internal External Switchover bit
  1408                           ;	IESO = OFF, Internal External Switchover mode is disabled
  1409                           ;	Fail-Safe Clock Monitor Enabled bit
  1410                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1411     2007                     	org	8199
  1412     2007  30C4               	dw	12484

Data Sizes:
    Strings     0
    Constant    37
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      8       8
    BANK1            32      0       0

Pointer List with Targets:

    send_Text@s	PTR const unsigned char  size(1) Largest target is 16
		 -> myText2(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_init_Lcd
    _main->_reset_Lcd
    _send_Text->_send_Nibbles
    _reset_Lcd->_send_Nibbles
    _pos_Lcd->_send_Nibbles
    _init_Lcd->_send_Nibbles
    _send_Nibbles->_do_Shiftr

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_pos_Lcd
    _main->_send_Text

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4576
                                              4 BANK0      4     4      0
                           _init_Lcd
                           _init_Pic
                            _pos_Lcd
                          _reset_Lcd
                       _send_Nibbles
                          _send_Text
 ---------------------------------------------------------------------------------
 (1) _send_Text                                            5     4      1    1003
                                             10 COMMON     1     0      1
                                              0 BANK0      4     4      0
                       _send_Nibbles
 ---------------------------------------------------------------------------------
 (1) _reset_Lcd                                            2     2      0     804
                                             10 COMMON     2     2      0
                       _send_Nibbles
 ---------------------------------------------------------------------------------
 (1) _pos_Lcd                                              5     4      1    1024
                                             10 COMMON     1     0      1
                                              0 BANK0      4     4      0
                       _send_Nibbles
 ---------------------------------------------------------------------------------
 (1) _init_Pic                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_Lcd                                             2     2      0     873
                                             10 COMMON     2     2      0
                           _do_Lcden
                          _do_Shiftr
                       _send_Nibbles
 ---------------------------------------------------------------------------------
 (2) _send_Nibbles                                         6     5      1     804
                                              5 COMMON     5     4      1
                           _do_Lcden
                          _do_Shiftr
 ---------------------------------------------------------------------------------
 (3) _do_Shiftr                                            3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _do_Lcden                                             1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_Lcd
     _do_Lcden
     _do_Shiftr
     _send_Nibbles
       _do_Lcden
       _do_Shiftr
   _init_Pic
   _pos_Lcd
     _send_Nibbles
   _reset_Lcd
     _send_Nibbles
   _send_Nibbles
   _send_Text
     _send_Nibbles

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      8       8       4       10.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Apr 01 18:22:16 2023

                      pc 0002                       l52 007E                       l53 00A0  
                     l45 0182                       l54 00A7                       l70 00F9  
                     l63 007B                       l57 0161                       l49 0119  
                     l73 014F                       l67 0136                       l78 000F  
                     fsr 0004                      l811 007D                      l821 008E  
                    l901 00E4                      l831 0150                      l823 0091  
                    l903 00EC                      l911 013A                      l833 0155  
                    l825 0093                      l817 0086                      l841 00FB  
                    l905 00F1                      l913 0143                      l835 015A  
                    l827 0096                      l819 008C                      l851 0115  
                    l843 0105                      l931 0027                      l829 009A  
                    l853 0116                      l845 0108                      l861 0179  
                    l909 0137                      l933 0035                      l925 0015  
                    l917 000D                      l855 0118                      l847 010D  
                    l839 00FB                      l863 017C                      l871 0050  
                    l935 0039                      l927 001C                      l919 0013  
                    l849 0113                      l865 017E                      l881 011C  
                    l873 0052                      l937 003D                      l929 0021  
                    l891 00D3                      l867 0180                      l859 0174  
                    l883 0125                      l875 005A                      l939 004B  
                    l893 00DC                      l885 0129                      l877 0064  
                    l895 00DE                      l887 012C                      l879 0069  
                    l897 00E1                      l899 00E3                      u110 0084  
                    u111 0081                      u130 00A0                      u131 009F  
                    u124 0086                      u150 010D                      u151 010C  
                    u207 0044                      u160 007B                      u145 00FE  
                    u161 007A                      u217 005F                      u170 0125  
                    u307 0157                      u171 0124                      u227 013E  
                    u180 0027                      u317 015E                      u237 014A  
                    u165 0077                      u181 0026                      u247 0131  
                    u257 00D7                      u267 00E6                      u277 00EE  
                    u197 002E                      u287 00F6                      u297 008A  
                    _isr 0162                      fsr0 0004                     ?_isr 0070  
                   _GPIO 0005                     i1l42 016D                     u8_20 0166  
                   u8_21 0165                     u9_20 016A                     u9_21 0169  
                   _main 000D                     btemp 007E                     start 000A  
                  ??_isr 0070                    ?_main 0070                    _ANSEL 009F  
                  i1l781 0162                    i1l783 0166                    i1l785 016A  
        __end_of_lcdHome 00C1          __end_of_lcdFunc 00BF                    main@i 0027  
        __end_of_myText1 00BE          __end_of_myText2 00D3          __end_of_pos_Lcd 0137  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000B             __end_of_main 004E                   ??_main 0024  
       send_Nibbles@data 0077         send_Nibbles@lowB 0078                   _CMCON0 0019  
                 _TRISIO 0085         __end_of_do_Lcden 0162         __end_of_lcd4bits 00C3  
       __end_of_lcdClear 00C2                   _lcdCon 00BF         __end_of_init_Lcd 00FA  
       __end_of_init_Pic 0183                   saved_w 007E                ??_pos_Lcd 0020  
__end_of__initialization 000B           __pcstackCOMMON 0070            ?_send_Nibbles 0075  
             __pmaintext 000D               __pintentry 0004                ?_do_Lcden 0070  
         ??_send_Nibbles 0076               __stringtab 00A8        __end_of_do_Shiftr 00A8  
              ?_init_Lcd 0070                ?_init_Pic 0070                  _lcdHome 00C0  
                _lcdFunc 00BE                  __ptext1 004E                  __ptext2 0137  
                __ptext3 011A                  __ptext4 0174                  __ptext5 00D3  
                __ptext6 00FA                  __ptext7 007C                  __ptext8 0150  
                __ptext9 0162               ??_do_Lcden 0072                  _myText1 00AE  
                _myText2 00C3               do_Shiftr@i 0074                  _pos_Lcd 011A  
   end_of_initialization 000B        __end_of_send_Text 007C               ??_init_Lcd 007A  
      __end_of_reset_Lcd 0150               ??_init_Pic 0072     __end_of_send_Nibbles 011A  
         __end_of_lcdCon 00C0      start_initialization 000B              __end_of_isr 0174  
        send_Nibbles@hiB 0079                ___latbits 0000            __pcstackBANK0 0020  
              _do_Shiftr 007C               send_Text@i 0023               send_Text@n 007A  
             send_Text@s 0022                __pstrings 00A8                 ?_pos_Lcd 007A  
             pos_Lcd@pos 0023        interrupt_function 0004                 _GPIObits 0005  
              _send_Text 004E               ?_do_Shiftr 0070                _reset_Lcd 0137  
            __stringbase 00AD             _send_Nibbles 00FA               ?_send_Text 007A  
         send_Nibbles@rs 0075               ?_reset_Lcd 0070       __end_of__stringtab 00AE  
               _do_Lcden 0150                 _lcd4bits 00C2                 _lcdClear 00C1  
               _init_Lcd 00D3                 _init_Pic 0174              ??_do_Shiftr 0072  
             _INTCONbits 000B           do_Shiftr@value 0073                 intlevel1 0000  
            ??_send_Text 0020                 pos_Lcd@x 0022                 pos_Lcd@y 007A  
              stringcode 00A8              ??_reset_Lcd 007A               _OSCCONbits 008F  
               stringdir 00A8                 stringtab 00A8  
